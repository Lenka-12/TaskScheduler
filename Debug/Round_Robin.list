
Round_Robin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a38  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd4  08000bd4  00010bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000bd8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050a8  20000004  08000bdc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050ac  08000bdc  000250ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001cce  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007ba  00000000  00000000  00021d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00022500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000117  00000000  00000000  00022690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ea7d  00000000  00000000  000227a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001caf  00000000  00000000  00031224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00053956  00000000  00000000  00032ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000004dc  00000000  00000000  0008682c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00086d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000bb8 	.word	0x08000bb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000bb8 	.word	0x08000bb8

080001d8 <GPIO_ClockConfig>:
 */

#include "gpio_driver.h"


void GPIO_ClockConfig(GPIO_TypeDef* GPIOx,uint8_t EnOrDi){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi){
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d041      	beq.n	800026e <GPIO_ClockConfig+0x96>
        if (GPIOx==GPIOA){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a43      	ldr	r2, [pc, #268]	; (80002fc <GPIO_ClockConfig+0x124>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_ClockConfig+0x28>
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001f2:	4b43      	ldr	r3, [pc, #268]	; (8000300 <GPIO_ClockConfig+0x128>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a42      	ldr	r2, [pc, #264]	; (8000300 <GPIO_ClockConfig+0x128>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
        else if (GPIOx==GPIOH){
            RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOHEN;
        }

    }
}
 80001fe:	e077      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOB){
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a40      	ldr	r2, [pc, #256]	; (8000304 <GPIO_ClockConfig+0x12c>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_ClockConfig+0x3e>
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000208:	4b3d      	ldr	r3, [pc, #244]	; (8000300 <GPIO_ClockConfig+0x128>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a3c      	ldr	r2, [pc, #240]	; (8000300 <GPIO_ClockConfig+0x128>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000214:	e06c      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOC){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a3b      	ldr	r2, [pc, #236]	; (8000308 <GPIO_ClockConfig+0x130>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_ClockConfig+0x54>
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800021e:	4b38      	ldr	r3, [pc, #224]	; (8000300 <GPIO_ClockConfig+0x128>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a37      	ldr	r2, [pc, #220]	; (8000300 <GPIO_ClockConfig+0x128>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
}
 800022a:	e061      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOD){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a37      	ldr	r2, [pc, #220]	; (800030c <GPIO_ClockConfig+0x134>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_ClockConfig+0x6a>
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000234:	4b32      	ldr	r3, [pc, #200]	; (8000300 <GPIO_ClockConfig+0x128>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a31      	ldr	r2, [pc, #196]	; (8000300 <GPIO_ClockConfig+0x128>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e056      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOE){
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a32      	ldr	r2, [pc, #200]	; (8000310 <GPIO_ClockConfig+0x138>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_ClockConfig+0x80>
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800024a:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <GPIO_ClockConfig+0x128>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a2c      	ldr	r2, [pc, #176]	; (8000300 <GPIO_ClockConfig+0x128>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e04b      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOH){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <GPIO_ClockConfig+0x13c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d147      	bne.n	80002f0 <GPIO_ClockConfig+0x118>
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000260:	4b27      	ldr	r3, [pc, #156]	; (8000300 <GPIO_ClockConfig+0x128>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a26      	ldr	r2, [pc, #152]	; (8000300 <GPIO_ClockConfig+0x128>)
 8000266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e040      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        if (GPIOx==GPIOA){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a22      	ldr	r2, [pc, #136]	; (80002fc <GPIO_ClockConfig+0x124>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_ClockConfig+0xac>
            RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000276:	4b22      	ldr	r3, [pc, #136]	; (8000300 <GPIO_ClockConfig+0x128>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a21      	ldr	r2, [pc, #132]	; (8000300 <GPIO_ClockConfig+0x128>)
 800027c:	f023 0301 	bic.w	r3, r3, #1
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e035      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOB){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <GPIO_ClockConfig+0x12c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_ClockConfig+0xc2>
            RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN;
 800028c:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <GPIO_ClockConfig+0x128>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <GPIO_ClockConfig+0x128>)
 8000292:	f023 0302 	bic.w	r3, r3, #2
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e02a      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOC){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <GPIO_ClockConfig+0x130>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_ClockConfig+0xd8>
            RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <GPIO_ClockConfig+0x128>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <GPIO_ClockConfig+0x128>)
 80002a8:	f023 0304 	bic.w	r3, r3, #4
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e01f      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOD){
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a16      	ldr	r2, [pc, #88]	; (800030c <GPIO_ClockConfig+0x134>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIO_ClockConfig+0xee>
            RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <GPIO_ClockConfig+0x128>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a10      	ldr	r2, [pc, #64]	; (8000300 <GPIO_ClockConfig+0x128>)
 80002be:	f023 0308 	bic.w	r3, r3, #8
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e014      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOE){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a11      	ldr	r2, [pc, #68]	; (8000310 <GPIO_ClockConfig+0x138>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_ClockConfig+0x104>
            RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <GPIO_ClockConfig+0x128>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <GPIO_ClockConfig+0x128>)
 80002d4:	f023 0310 	bic.w	r3, r3, #16
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e009      	b.n	80002f0 <GPIO_ClockConfig+0x118>
        else if (GPIOx==GPIOH){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <GPIO_ClockConfig+0x13c>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d105      	bne.n	80002f0 <GPIO_ClockConfig+0x118>
            RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOHEN;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <GPIO_ClockConfig+0x128>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <GPIO_ClockConfig+0x128>)
 80002ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40020000 	.word	0x40020000
 8000300:	40023800 	.word	0x40023800
 8000304:	40020400 	.word	0x40020400
 8000308:	40020800 	.word	0x40020800
 800030c:	40020c00 	.word	0x40020c00
 8000310:	40021000 	.word	0x40021000
 8000314:	40021c00 	.word	0x40021c00

08000318 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t* GPIOx_Handle){
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

	uint8_t PinNumber = GPIOx_Handle->GPIOx_Cofig.GPIO_PinNumber;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	73fb      	strb	r3, [r7, #15]
	GPIOx_Handle->GPIOx->MODER &=~(GPIO_MODE_ANALOG<<2*PinNumber);  //Clear Mode Register
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	2103      	movs	r1, #3
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	43db      	mvns	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	400a      	ands	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
    //1. configure the Mode of gpio pin
    if (GPIOx_Handle->GPIOx_Cofig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	795b      	ldrb	r3, [r3, #5]
 8000346:	2b03      	cmp	r3, #3
 8000348:	d80f      	bhi.n	800036a <GPIO_Init+0x52>
        //Non interrupt mode

        GPIOx_Handle->GPIOx->MODER |= (GPIOx_Handle->GPIOx_Cofig.GPIO_PinMode<<2*(PinNumber));
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	4619      	mov	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	430a      	orrs	r2, r1
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	e098      	b.n	800049c <GPIO_Init+0x184>


    }
    else{
    	//1. Configure Edge properties
    	if (GPIOx_Handle->GPIOx_Cofig.GPIO_PinMode==GPIO_MODE_IT_RT){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	795b      	ldrb	r3, [r3, #5]
 800036e:	2b04      	cmp	r3, #4
 8000370:	d113      	bne.n	800039a <GPIO_Init+0x82>
    		//Configure RTSR
    		EXTI->RTSR |= (0x01U<<PinNumber);
 8000372:	4b91      	ldr	r3, [pc, #580]	; (80005b8 <GPIO_Init+0x2a0>)
 8000374:	689a      	ldr	r2, [r3, #8]
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	2101      	movs	r1, #1
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
 800037e:	498e      	ldr	r1, [pc, #568]	; (80005b8 <GPIO_Init+0x2a0>)
 8000380:	4313      	orrs	r3, r2
 8000382:	608b      	str	r3, [r1, #8]
    		//CLear RTSR
    		EXTI->FTSR &= ~(0x01U<<PinNumber);
 8000384:	4b8c      	ldr	r3, [pc, #560]	; (80005b8 <GPIO_Init+0x2a0>)
 8000386:	68da      	ldr	r2, [r3, #12]
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	2101      	movs	r1, #1
 800038c:	fa01 f303 	lsl.w	r3, r1, r3
 8000390:	43db      	mvns	r3, r3
 8000392:	4989      	ldr	r1, [pc, #548]	; (80005b8 <GPIO_Init+0x2a0>)
 8000394:	4013      	ands	r3, r2
 8000396:	60cb      	str	r3, [r1, #12]
 8000398:	e02d      	b.n	80003f6 <GPIO_Init+0xde>
    	}
    	else if ((GPIOx_Handle->GPIOx_Cofig.GPIO_PinMode==GPIO_MODE_IT_FT)){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	795b      	ldrb	r3, [r3, #5]
 800039e:	2b05      	cmp	r3, #5
 80003a0:	d113      	bne.n	80003ca <GPIO_Init+0xb2>
    		//Configure FTSR
    		EXTI->FTSR |= (0x01U<<PinNumber);
 80003a2:	4b85      	ldr	r3, [pc, #532]	; (80005b8 <GPIO_Init+0x2a0>)
 80003a4:	68da      	ldr	r2, [r3, #12]
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	2101      	movs	r1, #1
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	4982      	ldr	r1, [pc, #520]	; (80005b8 <GPIO_Init+0x2a0>)
 80003b0:	4313      	orrs	r3, r2
 80003b2:	60cb      	str	r3, [r1, #12]
    		//RTSR
    		EXTI->RTSR &= ~(0x01U<<PinNumber);
 80003b4:	4b80      	ldr	r3, [pc, #512]	; (80005b8 <GPIO_Init+0x2a0>)
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	43db      	mvns	r3, r3
 80003c2:	497d      	ldr	r1, [pc, #500]	; (80005b8 <GPIO_Init+0x2a0>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	608b      	str	r3, [r1, #8]
 80003c8:	e015      	b.n	80003f6 <GPIO_Init+0xde>
    	}

    	else if ((GPIOx_Handle->GPIOx_Cofig.GPIO_PinMode==GPIO_MODE_IT_RFT)){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	2b06      	cmp	r3, #6
 80003d0:	d111      	bne.n	80003f6 <GPIO_Init+0xde>
    		//Configure FTSR and RTSR
    		EXTI->FTSR |= (0x01U<<PinNumber);
 80003d2:	4b79      	ldr	r3, [pc, #484]	; (80005b8 <GPIO_Init+0x2a0>)
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2101      	movs	r1, #1
 80003da:	fa01 f303 	lsl.w	r3, r1, r3
 80003de:	4976      	ldr	r1, [pc, #472]	; (80005b8 <GPIO_Init+0x2a0>)
 80003e0:	4313      	orrs	r3, r2
 80003e2:	60cb      	str	r3, [r1, #12]
    		EXTI->RTSR |= (0x01U<<PinNumber);
 80003e4:	4b74      	ldr	r3, [pc, #464]	; (80005b8 <GPIO_Init+0x2a0>)
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	2101      	movs	r1, #1
 80003ec:	fa01 f303 	lsl.w	r3, r1, r3
 80003f0:	4971      	ldr	r1, [pc, #452]	; (80005b8 <GPIO_Init+0x2a0>)
 80003f2:	4313      	orrs	r3, r2
 80003f4:	608b      	str	r3, [r1, #8]

    	}

    	//2. Configure GPIO port selection in SYSCFG_EXIXR
    	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003f6:	4b71      	ldr	r3, [pc, #452]	; (80005bc <GPIO_Init+0x2a4>)
 80003f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003fa:	4a70      	ldr	r2, [pc, #448]	; (80005bc <GPIO_Init+0x2a4>)
 80003fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000400:	6453      	str	r3, [r2, #68]	; 0x44
    	uint8_t EXTICRx = PinNumber/4;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	089b      	lsrs	r3, r3, #2
 8000406:	73bb      	strb	r3, [r7, #14]
    	uint8_t  EXTICRpos = PinNumber%4;
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	f003 0303 	and.w	r3, r3, #3
 800040e:	737b      	strb	r3, [r7, #13]

    	uint8_t portcode = GPIO_BASEADDR_TO_CODE(GPIOx_Handle->GPIOx);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a6a      	ldr	r2, [pc, #424]	; (80005c0 <GPIO_Init+0x2a8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d024      	beq.n	8000464 <GPIO_Init+0x14c>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a69      	ldr	r2, [pc, #420]	; (80005c4 <GPIO_Init+0x2ac>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d01d      	beq.n	8000460 <GPIO_Init+0x148>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a67      	ldr	r2, [pc, #412]	; (80005c8 <GPIO_Init+0x2b0>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d016      	beq.n	800045c <GPIO_Init+0x144>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a66      	ldr	r2, [pc, #408]	; (80005cc <GPIO_Init+0x2b4>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d00f      	beq.n	8000458 <GPIO_Init+0x140>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a64      	ldr	r2, [pc, #400]	; (80005d0 <GPIO_Init+0x2b8>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d008      	beq.n	8000454 <GPIO_Init+0x13c>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a63      	ldr	r2, [pc, #396]	; (80005d4 <GPIO_Init+0x2bc>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d101      	bne.n	8000450 <GPIO_Init+0x138>
 800044c:	2307      	movs	r3, #7
 800044e:	e00a      	b.n	8000466 <GPIO_Init+0x14e>
 8000450:	2300      	movs	r3, #0
 8000452:	e008      	b.n	8000466 <GPIO_Init+0x14e>
 8000454:	2304      	movs	r3, #4
 8000456:	e006      	b.n	8000466 <GPIO_Init+0x14e>
 8000458:	2303      	movs	r3, #3
 800045a:	e004      	b.n	8000466 <GPIO_Init+0x14e>
 800045c:	2302      	movs	r3, #2
 800045e:	e002      	b.n	8000466 <GPIO_Init+0x14e>
 8000460:	2301      	movs	r3, #1
 8000462:	e000      	b.n	8000466 <GPIO_Init+0x14e>
 8000464:	2300      	movs	r3, #0
 8000466:	733b      	strb	r3, [r7, #12]

    	SYSCFG->EXTICR[EXTICRx] |= (portcode<<4*EXTICRpos);
 8000468:	4a5b      	ldr	r2, [pc, #364]	; (80005d8 <GPIO_Init+0x2c0>)
 800046a:	7bbb      	ldrb	r3, [r7, #14]
 800046c:	3302      	adds	r3, #2
 800046e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000472:	7b39      	ldrb	r1, [r7, #12]
 8000474:	7b7b      	ldrb	r3, [r7, #13]
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	4618      	mov	r0, r3
 800047e:	4956      	ldr	r1, [pc, #344]	; (80005d8 <GPIO_Init+0x2c0>)
 8000480:	7bbb      	ldrb	r3, [r7, #14]
 8000482:	4302      	orrs	r2, r0
 8000484:	3302      	adds	r3, #2
 8000486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    	//3. Unmask the pin in EXTI_IMR
    	EXTI->IMR |= (0x01U<<PinNumber);
 800048a:	4b4b      	ldr	r3, [pc, #300]	; (80005b8 <GPIO_Init+0x2a0>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	2101      	movs	r1, #1
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	4948      	ldr	r1, [pc, #288]	; (80005b8 <GPIO_Init+0x2a0>)
 8000498:	4313      	orrs	r3, r2
 800049a:	600b      	str	r3, [r1, #0]

    }
    //2.Pin Speed
    GPIOx_Handle->GPIOx->OSPEEDR &=~(GPIO_MODE_ANALOG<<2*PinNumber);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	689a      	ldr	r2, [r3, #8]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	2103      	movs	r1, #3
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	43db      	mvns	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	400a      	ands	r2, r1
 80004b6:	609a      	str	r2, [r3, #8]
    GPIOx_Handle->GPIOx->OSPEEDR |=(GPIOx_Handle->GPIOx_Cofig.GPIO_PinSpeed<<2*PinNumber);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689a      	ldr	r2, [r3, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	799b      	ldrb	r3, [r3, #6]
 80004c2:	4619      	mov	r1, r3
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	4619      	mov	r1, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	430a      	orrs	r2, r1
 80004d4:	609a      	str	r2, [r3, #8]

    //3.PullUp or PullDown
    GPIOx_Handle->GPIOx->PUPDR &=~(GPIO_MODE_ANALOG<<2*PinNumber);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	2103      	movs	r1, #3
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	43db      	mvns	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	400a      	ands	r2, r1
 80004f0:	60da      	str	r2, [r3, #12]
    GPIOx_Handle->GPIOx->PUPDR |=(GPIOx_Handle->GPIOx_Cofig.GPIO_PullUpPullDown_Ctrl<<2*PinNumber);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68da      	ldr	r2, [r3, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	7a5b      	ldrb	r3, [r3, #9]
 80004fc:	4619      	mov	r1, r3
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	fa01 f303 	lsl.w	r3, r1, r3
 8000506:	4619      	mov	r1, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	430a      	orrs	r2, r1
 800050e:	60da      	str	r2, [r3, #12]

    //4.Output Type
    GPIOx_Handle->GPIOx->OTYPER &=~(GPIO_MODE_ANALOG<<PinNumber);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	2103      	movs	r1, #3
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	400a      	ands	r2, r1
 8000528:	605a      	str	r2, [r3, #4]
    GPIOx_Handle->GPIOx->OTYPER |=(GPIOx_Handle->GPIOx_Cofig.GPIO_OPType<<PinNumber);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	79db      	ldrb	r3, [r3, #7]
 8000534:	4619      	mov	r1, r3
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	fa01 f303 	lsl.w	r3, r1, r3
 800053c:	4619      	mov	r1, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	430a      	orrs	r2, r1
 8000544:	605a      	str	r2, [r3, #4]

   //5.Alt functionality
    if (GPIOx_Handle->GPIOx_Cofig.GPIO_PinMode==GPIO_MODE_Alt){
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	795b      	ldrb	r3, [r3, #5]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d12e      	bne.n	80005ac <GPIO_Init+0x294>
    	//Configure Alt registers
    	uint8_t AFRn = PinNumber/8;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	08db      	lsrs	r3, r3, #3
 8000552:	72fb      	strb	r3, [r7, #11]
    	uint8_t AFSELy = PinNumber%8;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	72bb      	strb	r3, [r7, #10]
    	GPIOx_Handle->GPIOx->AFR[AFRn] &=~(0xFU<<4*AFSELy);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	7afa      	ldrb	r2, [r7, #11]
 8000562:	3208      	adds	r2, #8
 8000564:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000568:	7abb      	ldrb	r3, [r7, #10]
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	220f      	movs	r2, #15
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	43d9      	mvns	r1, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	7afa      	ldrb	r2, [r7, #11]
 800057a:	4001      	ands	r1, r0
 800057c:	3208      	adds	r2, #8
 800057e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    	GPIOx_Handle->GPIOx->AFR[AFRn] |= (GPIOx_Handle->GPIOx_Cofig.GPIO_PinAltFnMode<<4*AFSELy);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	7afa      	ldrb	r2, [r7, #11]
 8000588:	3208      	adds	r2, #8
 800058a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7a1b      	ldrb	r3, [r3, #8]
 8000592:	461a      	mov	r2, r3
 8000594:	7abb      	ldrb	r3, [r7, #10]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	4618      	mov	r0, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	7afa      	ldrb	r2, [r7, #11]
 80005a4:	4301      	orrs	r1, r0
 80005a6:	3208      	adds	r2, #8
 80005a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40013c00 	.word	0x40013c00
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020000 	.word	0x40020000
 80005c4:	40020400 	.word	0x40020400
 80005c8:	40020800 	.word	0x40020800
 80005cc:	40020c00 	.word	0x40020c00
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40021c00 	.word	0x40021c00
 80005d8:	40013800 	.word	0x40013800

080005dc <GPIO_TogglePin>:
void GPIO_WritePort(GPIO_TypeDef* GPIOx,uint16_t Value){
	GPIOx->ODR = Value;

}

void GPIO_TogglePin(GPIO_TypeDef* GPIOx,GPIO_PinNumber PinNumber){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR ^= (0x01U<<PinNumber);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	2101      	movs	r1, #1
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	405a      	eors	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	615a      	str	r2, [r3, #20]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <led_init>:
 */

#include "led.h"
#include "gpio_driver.h"

void led_init(){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOD*/
	GPIO_ClockConfig(GPIOD, ENABLE);
 800060e:	2101      	movs	r1, #1
 8000610:	4815      	ldr	r0, [pc, #84]	; (8000668 <led_init+0x60>)
 8000612:	f7ff fde1 	bl	80001d8 <GPIO_ClockConfig>

	/*Enable output mode for PD12*/
	GPIO_Handle_t led;

	led.GPIOx = GPIOD;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <led_init+0x60>)
 8000618:	607b      	str	r3, [r7, #4]

	led.GPIOx_Cofig.GPIO_OPType = PushPull;                         //OutPut PushPull
 800061a:	2300      	movs	r3, #0
 800061c:	72fb      	strb	r3, [r7, #11]
	led.GPIOx_Cofig.GPIO_PinAltFnMode = AF0;                        //Reset Alternate function
 800061e:	2300      	movs	r3, #0
 8000620:	733b      	strb	r3, [r7, #12]

	led.GPIOx_Cofig.GPIO_PinMode = GPIO_MODE_OUT;                   //Output Mode
 8000622:	2301      	movs	r3, #1
 8000624:	727b      	strb	r3, [r7, #9]
	led.GPIOx_Cofig.GPIO_PinNumber = GPIO_PIN_12;                   //Green led
 8000626:	230c      	movs	r3, #12
 8000628:	723b      	strb	r3, [r7, #8]

	led.GPIOx_Cofig.GPIO_PinSpeed = LowSpeed;                       //lowspeed mode
 800062a:	2300      	movs	r3, #0
 800062c:	72bb      	strb	r3, [r7, #10]
	led.GPIOx_Cofig.GPIO_PullUpPullDown_Ctrl = NoPullUpOrPullDown;  //no pullup or pulldown
 800062e:	2300      	movs	r3, #0
 8000630:	737b      	strb	r3, [r7, #13]


	GPIO_Init(&led);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fe6f 	bl	8000318 <GPIO_Init>


	led.GPIOx_Cofig.GPIO_PinNumber = GPIO_PIN_13;                   //Green led
 800063a:	230d      	movs	r3, #13
 800063c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&led);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe69 	bl	8000318 <GPIO_Init>



	led.GPIOx_Cofig.GPIO_PinNumber = GPIO_PIN_14;                   //Green led
 8000646:	230e      	movs	r3, #14
 8000648:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&led);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fe63 	bl	8000318 <GPIO_Init>


	led.GPIOx_Cofig.GPIO_PinNumber = GPIO_PIN_15;                   //Green led
 8000652:	230f      	movs	r3, #15
 8000654:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&led);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fe5d 	bl	8000318 <GPIO_Init>



}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40020c00 	.word	0x40020c00

0800066c <idle>:
TaskProfiler Task3_Profiler;
TaskProfiler Idle_Profiler;


/*user defined threads*/
void idle(void){
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	while(1){
		 Idle_Profiler++;
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <idle+0x10>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a01      	ldr	r2, [pc, #4]	; (800067c <idle+0x10>)
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e7f9      	b.n	8000670 <idle+0x4>
 800067c:	20000030 	.word	0x20000030

08000680 <task0>:

	}
}
void task0(void){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	while(1){
		Task0_Profiler++;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <task0+0x20>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <task0+0x20>)
 800068c:	6013      	str	r3, [r2, #0]
		GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800068e:	210c      	movs	r1, #12
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <task0+0x24>)
 8000692:	f7ff ffa3 	bl	80005dc <GPIO_TogglePin>
		thread_delay(1000);
 8000696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069a:	f000 fa17 	bl	8000acc <thread_delay>
		Task0_Profiler++;
 800069e:	e7f1      	b.n	8000684 <task0+0x4>
 80006a0:	20000020 	.word	0x20000020
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <task1>:

	}
}

void task1(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	while(1){
		Task1_Profiler++;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <task1+0x20>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <task1+0x20>)
 80006b4:	6013      	str	r3, [r2, #0]
		GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80006b6:	210d      	movs	r1, #13
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <task1+0x24>)
 80006ba:	f7ff ff8f 	bl	80005dc <GPIO_TogglePin>
		thread_delay(500);
 80006be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c2:	f000 fa03 	bl	8000acc <thread_delay>
		Task1_Profiler++;
 80006c6:	e7f1      	b.n	80006ac <task1+0x4>
 80006c8:	20000024 	.word	0x20000024
 80006cc:	40020c00 	.word	0x40020c00

080006d0 <task2>:

	}
}

void task2(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	while(1){
		Task2_Profiler++;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <task2+0x20>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <task2+0x20>)
 80006dc:	6013      	str	r3, [r2, #0]
		GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80006de:	210e      	movs	r1, #14
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <task2+0x24>)
 80006e2:	f7ff ff7b 	bl	80005dc <GPIO_TogglePin>
		thread_delay(250);
 80006e6:	20fa      	movs	r0, #250	; 0xfa
 80006e8:	f000 f9f0 	bl	8000acc <thread_delay>
		Task2_Profiler++;
 80006ec:	e7f2      	b.n	80006d4 <task2+0x4>
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028
 80006f4:	40020c00 	.word	0x40020c00

080006f8 <task3>:

	}
}


void task3(void){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	while(1){
		Task3_Profiler++;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <task3+0x20>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <task3+0x20>)
 8000704:	6013      	str	r3, [r2, #0]
		GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000706:	210f      	movs	r1, #15
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <task3+0x24>)
 800070a:	f7ff ff67 	bl	80005dc <GPIO_TogglePin>
		thread_delay(125);
 800070e:	207d      	movs	r0, #125	; 0x7d
 8000710:	f000 f9dc 	bl	8000acc <thread_delay>
		Task3_Profiler++;
 8000714:	e7f2      	b.n	80006fc <task3+0x4>
 8000716:	bf00      	nop
 8000718:	2000002c 	.word	0x2000002c
 800071c:	40020c00 	.word	0x40020c00

08000720 <main>:

	}
}
void (*threads[NUM_OF_THREADS])(void); /*threads array*/

int main(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	threads[0] = idle;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <main+0x3c>)
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <main+0x40>)
 8000728:	601a      	str	r2, [r3, #0]
	threads[1] = task0;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <main+0x3c>)
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <main+0x44>)
 800072e:	605a      	str	r2, [r3, #4]
	threads[2] = task1;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <main+0x3c>)
 8000732:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <main+0x48>)
 8000734:	609a      	str	r2, [r3, #8]
	threads[3] = task2;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <main+0x3c>)
 8000738:	4a0c      	ldr	r2, [pc, #48]	; (800076c <main+0x4c>)
 800073a:	60da      	str	r2, [r3, #12]
	threads[4] = task3;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <main+0x3c>)
 800073e:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <main+0x50>)
 8000740:	611a      	str	r2, [r3, #16]
	/*Initialize the kernel*/
	led_init();
 8000742:	f7ff ff61 	bl	8000608 <led_init>
	osKernelInit();
 8000746:	f000 f8cb 	bl	80008e0 <osKernelInit>

	/*add threads*/
	osKernelAddThreads(threads);
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <main+0x3c>)
 800074c:	f000 f874 	bl	8000838 <osKernelAddThreads>

	/*set RR time quanta*/
	osKernelLaunch(QUANTA);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 f8d5 	bl	8000900 <osKernelLaunch>
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000034 	.word	0x20000034
 8000760:	0800066d 	.word	0x0800066d
 8000764:	08000681 	.word	0x08000681
 8000768:	080006a9 	.word	0x080006a9
 800076c:	080006d1 	.word	0x080006d1
 8000770:	080006f9 	.word	0x080006f9

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <osKernelStackInit>:
uint32_t curr_tick_count; /*current tick count*/
uint8_t tick_freq    = 1;


static void osKernelStackInit(int i)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt = &TCB_STACK[i][STACKSIZE-16];    /*stack pointer*/
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	031b      	lsls	r3, r3, #12
 80007d4:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <osKernelStackInit+0x64>)
 80007da:	441a      	add	r2, r3
 80007dc:	4914      	ldr	r1, [pc, #80]	; (8000830 <osKernelStackInit+0x68>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	440b      	add	r3, r1
 80007e4:	601a      	str	r2, [r3, #0]
	/*Full descending stack, last element on highest memory address*/
	TCB_STACK[i][STACKSIZE-1] = THUMBBIT_SET; /*xPSR 24th bit is always 1*/
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <osKernelStackInit+0x64>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	031b      	lsls	r3, r3, #12
 80007ec:	4413      	add	r3, r2
 80007ee:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 80007f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007f6:	601a      	str	r2, [r3, #0]
	/*dummy stack content for other registers except PC*/
	for (uint8_t j=3; j<17; j++){
 80007f8:	2303      	movs	r3, #3
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	e00c      	b.n	8000818 <osKernelStackInit+0x50>
		/* LR{R14},R12,R3,R2,R1 first then R10-R4*/
		TCB_STACK[i][STACKSIZE-j] = 0xAAAABBBB; /*dummy data*/
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000804:	4909      	ldr	r1, [pc, #36]	; (800082c <osKernelStackInit+0x64>)
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	0292      	lsls	r2, r2, #10
 800080a:	4413      	add	r3, r2
 800080c:	4a09      	ldr	r2, [pc, #36]	; (8000834 <osKernelStackInit+0x6c>)
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t j=3; j<17; j++){
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	3301      	adds	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	2b10      	cmp	r3, #16
 800081c:	d9ef      	bls.n	80007fe <osKernelStackInit+0x36>
	}
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	2000009c 	.word	0x2000009c
 8000830:	2000004c 	.word	0x2000004c
 8000834:	aaaabbbb 	.word	0xaaaabbbb

08000838 <osKernelAddThreads>:

uint8_t osKernelAddThreads(void(*threads[])(void)){
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
	/*disable global interrupts*/
	__disable_irq();
	int i=0;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
	for (;i<(NUM_OF_THREADS-1); i++){
 8000848:	e00d      	b.n	8000866 <osKernelAddThreads+0x2e>
		tcbs[i].nextPt = &tcbs[i+1];  /*linked list of threads*/
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <osKernelAddThreads+0x94>)
 8000852:	441a      	add	r2, r3
 8000854:	491d      	ldr	r1, [pc, #116]	; (80008cc <osKernelAddThreads+0x94>)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	440b      	add	r3, r1
 800085c:	3304      	adds	r3, #4
 800085e:	601a      	str	r2, [r3, #0]
	for (;i<(NUM_OF_THREADS-1); i++){
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3301      	adds	r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b03      	cmp	r3, #3
 800086a:	ddee      	ble.n	800084a <osKernelAddThreads+0x12>
	}
	head = &tcbs[0];
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <osKernelAddThreads+0x98>)
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <osKernelAddThreads+0x94>)
 8000870:	601a      	str	r2, [r3, #0]
	tcbs[NUM_OF_THREADS-1].nextPt = &tcbs[0]; /*tcb of last thread points to tcb of first thread*/
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <osKernelAddThreads+0x94>)
 8000874:	4a15      	ldr	r2, [pc, #84]	; (80008cc <osKernelAddThreads+0x94>)
 8000876:	645a      	str	r2, [r3, #68]	; 0x44
	i = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
	for(;i<NUM_OF_THREADS; i++){
 800087c:	e019      	b.n	80008b2 <osKernelAddThreads+0x7a>
		osKernelStackInit(i); /*Initialize stack for each task*/
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff ffa2 	bl	80007c8 <osKernelStackInit>
		tcbs[i].current_state = TASK_READY_STATE;
 8000884:	4a11      	ldr	r2, [pc, #68]	; (80008cc <osKernelAddThreads+0x94>)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	4413      	add	r3, r2
 800088c:	330c      	adds	r3, #12
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]

		TCB_STACK[i][STACKSIZE-2] = (uint32_t)threads[i];  /*set PC to the address of each thread function*/
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <osKernelAddThreads+0x9c>)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	031b      	lsls	r3, r3, #12
 80008a4:	4413      	add	r3, r2
 80008a6:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80008aa:	6019      	str	r1, [r3, #0]
	for(;i<NUM_OF_THREADS; i++){
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	dde2      	ble.n	800087e <osKernelAddThreads+0x46>
	}
	currentPt = &tcbs[1]; /*Start from thread1*/
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <osKernelAddThreads+0xa0>)
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <osKernelAddThreads+0xa4>)
 80008bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008be:	b662      	cpsie	i
}
 80008c0:	bf00      	nop

	/*enable global interrupts*/
	__enable_irq();

	return 1;
 80008c2:	2301      	movs	r3, #1

}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000004c 	.word	0x2000004c
 80008d0:	200050a0 	.word	0x200050a0
 80008d4:	2000009c 	.word	0x2000009c
 80008d8:	2000509c 	.word	0x2000509c
 80008dc:	2000005c 	.word	0x2000005c

080008e0 <osKernelInit>:

void osKernelInit(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	MS_PRESCALER = (AHB_FREQ/1000);
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <osKernelInit+0x1c>)
 80008e6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80008ea:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(PendSV_IRQn,15);
 80008ec:	210f      	movs	r1, #15
 80008ee:	f06f 0001 	mvn.w	r0, #1
 80008f2:	f7ff ff3f 	bl	8000774 <__NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000048 	.word	0x20000048

08000900 <osKernelLaunch>:


void osKernelLaunch(uint32_t quanta)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	/*Reset SysTick*/
	SysTick->CTRL = SysTick_Reset;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <osKernelLaunch+0x54>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
	/*clear SysTick current value register*/
	SysTick->VAL = 0;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <osKernelLaunch+0x54>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	/*Load quanta*/
	SysTick->LOAD = (quanta*MS_PRESCALER)-1;
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <osKernelLaunch+0x58>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <osKernelLaunch+0x54>)
 8000920:	3b01      	subs	r3, #1
 8000922:	6053      	str	r3, [r2, #4]
	/*Set SysTick to Low priority*/
	NVIC_SetPriority(SysTick_IRQn,15);
 8000924:	210f      	movs	r1, #15
 8000926:	f04f 30ff 	mov.w	r0, #4294967295
 800092a:	f7ff ff23 	bl	8000774 <__NVIC_SetPriority>
	/*select AHB as SysTick clock and SysTick exception*/
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk|SysTick_CTRL_TICKINT_Msk;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <osKernelLaunch+0x54>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <osKernelLaunch+0x54>)
 8000934:	f043 0306 	orr.w	r3, r3, #6
 8000938:	6013      	str	r3, [r2, #0]
	/*Enable SysTick*/
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <osKernelLaunch+0x54>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <osKernelLaunch+0x54>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6013      	str	r3, [r2, #0]
	/*Launch Scheduler*/
	osSchedulerLaunch();
 8000946:	f000 f843 	bl	80009d0 <osSchedulerLaunch>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	e000e010 	.word	0xe000e010
 8000958:	20000048 	.word	0x20000048

0800095c <SysTick_Handler>:


void SysTick_Handler(void){
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
		update_ticks();
 8000960:	f000 f80c 	bl	800097c <update_ticks>
		unblock_threads();
 8000964:	f000 f882 	bl	8000a6c <unblock_threads>
		SCB->ICSR |= 1U<<28; /*pend PendSV*/
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <SysTick_Handler+0x1c>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	4a02      	ldr	r2, [pc, #8]	; (8000978 <SysTick_Handler+0x1c>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6053      	str	r3, [r2, #4]


}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <update_ticks>:

static void update_ticks(){
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
	g_tick_count+=tick_freq;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <update_ticks+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <update_ticks+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <update_ticks+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000000 	.word	0x20000000
 80009a0:	200050a4 	.word	0x200050a4

080009a4 <PendSV_Handler>:

__attribute__((naked))void PendSV_Handler(void){
		/*1.suspend current thread*/

		/*disable global interrupts*/
		__asm volatile("CPSID I");
 80009a4:	b672      	cpsid	i
		/*save r4-r11*/
		__asm volatile("PUSH {R4-R11}");
 80009a6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		/*load currentPt to R0*/
		__asm volatile("LDR R0, =currentPt");
 80009aa:	4808      	ldr	r0, [pc, #32]	; (80009cc <PendSV_Handler+0x28>)
		/*load address of current thread tcb to R1*/
		__asm volatile("LDR R1,[R0]");
 80009ac:	6801      	ldr	r1, [r0, #0]
		/*store cortex-M stack to current Thread tcb stackpointer*/
		__asm volatile("STR SP,[R1]");
 80009ae:	f8c1 d000 	str.w	sp, [r1]

	  /*2. choose next thread*/
		__asm volatile("PUSH {R0,R1,LR}");
 80009b2:	b503      	push	{r0, r1, lr}
		__asm volatile("BL update_next_thread");
 80009b4:	f000 f836 	bl	8000a24 <update_next_thread>
		__asm volatile("POP {R0,R1,LR}");
 80009b8:	e8bd 4003 	ldmia.w	sp!, {r0, r1, lr}

		/*R1 = next updated thread*/
		__asm volatile("LDR R1,[R0]");
 80009bc:	6801      	ldr	r1, [r0, #0]

		/*SP = currentPt->StackPt*/
		__asm volatile("LDR SP,[R1]");
 80009be:	f8d1 d000 	ldr.w	sp, [r1]

		/*restore r4-r11*/
		__asm volatile("POP {R4-R11}");
 80009c2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

		/*enable global interrupts*/

		__asm volatile("CPSIE I");
 80009c6:	b662      	cpsie	i

		/*return from exception and restore saved stack frame*/
		__asm volatile("BX LR");
 80009c8:	4770      	bx	lr
}
 80009ca:	bf00      	nop
 80009cc:	2000509c 	.word	0x2000509c

080009d0 <osSchedulerLaunch>:


__attribute__((naked)) static void osSchedulerLaunch(void)
{
	   /*disable global interrupts*/
		__asm volatile("CPSID I");
 80009d0:	b672      	cpsid	i
		__asm volatile("LDR R0,=currentPt");
 80009d2:	4808      	ldr	r0, [pc, #32]	; (80009f4 <osSchedulerLaunch+0x24>)
		/*load address of current thread to r2*/
		__asm volatile("LDR R2, [R0]");
 80009d4:	6802      	ldr	r2, [r0, #0]
		/*set SP = currentPt->Stackpt*/
		__asm volatile("LDR SP,[R2]");
 80009d6:	f8d2 d000 	ldr.w	sp, [r2]
		/*restore r4-r11*/
		__asm volatile("POP {R4-R11}");
 80009da:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		/*restore r0-r3*/
		__asm volatile("POP {R0-R3}");
 80009de:	bc0f      	pop	{r0, r1, r2, r3}
		/*restore r12*/
		__asm volatile("POP {R12}");
 80009e0:	f85d cb04 	ldr.w	ip, [sp], #4
		/*skip LR*/
		__asm volatile("ADD SP,SP,#4");
 80009e4:	b001      	add	sp, #4
		/*load PC to LR*/
		__asm volatile("POP {LR}");
 80009e6:	f85d eb04 	ldr.w	lr, [sp], #4
		/*Skip xPSR*/
		__asm volatile("ADD SP,SP,#4");
 80009ea:	b001      	add	sp, #4
		/*enable global interrupts*/
		__asm volatile("CPSIE I");
 80009ec:	b662      	cpsie	i
		/*return from subroutine*/
		__asm volatile("BX LR");
 80009ee:	4770      	bx	lr
}
 80009f0:	bf00      	nop
 80009f2:	0000      	.short	0x0000
 80009f4:	2000509c 	.word	0x2000509c

080009f8 <getTick>:


uint32_t getTick(void){
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
	__disable_irq();
	curr_tick_count = g_tick_count;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <getTick+0x24>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <getTick+0x28>)
 8000a06:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a08:	b662      	cpsie	i
}
 8000a0a:	bf00      	nop
	__enable_irq();
	return curr_tick_count;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <getTick+0x28>)
 8000a0e:	681b      	ldr	r3, [r3, #0]

}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200050a4 	.word	0x200050a4
 8000a20:	200050a8 	.word	0x200050a8

08000a24 <update_next_thread>:
/*
 * @Brief: update the currentPt to next ready thread
 * @Param: None
 * @Retval: None
 */
void update_next_thread(void){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
    uint32_t state=TASK_BLOCKED_STATE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
    do{
    	currentPt=currentPt->nextPt;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <update_next_thread+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <update_next_thread+0x40>)
 8000a36:	6013      	str	r3, [r2, #0]
    	state=currentPt->current_state;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <update_next_thread+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	7b1b      	ldrb	r3, [r3, #12]
 8000a3e:	607b      	str	r3, [r7, #4]
    	if(state==TASK_READY_STATE){
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d006      	beq.n	8000a54 <update_next_thread+0x30>
    		break;
    	}

    }while(currentPt!=head);
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <update_next_thread+0x40>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <update_next_thread+0x44>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d1ed      	bne.n	8000a2e <update_next_thread+0xa>
}
 8000a52:	e000      	b.n	8000a56 <update_next_thread+0x32>
    		break;
 8000a54:	bf00      	nop
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2000509c 	.word	0x2000509c
 8000a68:	200050a0 	.word	0x200050a0

08000a6c <unblock_threads>:
/*
 * @Brief: unblock any ready task/thread except for idle task
 * @Param: None
 * @Retval: None
 */
void unblock_threads(void){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
   for (uint32_t i=1; i<NUM_OF_THREADS; i++){
 8000a72:	2301      	movs	r3, #1
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	e01b      	b.n	8000ab0 <unblock_threads+0x44>
       if (tcbs[i].current_state !=TASK_READY_STATE){
 8000a78:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <unblock_threads+0x58>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	4413      	add	r3, r2
 8000a80:	330c      	adds	r3, #12
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d010      	beq.n	8000aaa <unblock_threads+0x3e>
           if(tcbs[i].block_count==g_tick_count){
 8000a88:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <unblock_threads+0x58>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	011b      	lsls	r3, r3, #4
 8000a8e:	4413      	add	r3, r2
 8000a90:	3308      	adds	r3, #8
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <unblock_threads+0x5c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d106      	bne.n	8000aaa <unblock_threads+0x3e>
               tcbs[i].current_state =TASK_READY_STATE;
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <unblock_threads+0x58>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	011b      	lsls	r3, r3, #4
 8000aa2:	4413      	add	r3, r2
 8000aa4:	330c      	adds	r3, #12
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
   for (uint32_t i=1; i<NUM_OF_THREADS; i++){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3301      	adds	r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d9e0      	bls.n	8000a78 <unblock_threads+0xc>
           }
       }
   }
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	2000004c 	.word	0x2000004c
 8000ac8:	200050a4 	.word	0x200050a4

08000acc <thread_delay>:
 * @Brief: Add a delay tick_count to the thread
 * @Param: tick_count for desired delay in ms
 * @Retval: None
 * @Note: thread will be blocked for QUANTA*tick_count
 */
void thread_delay(uint32_t tick_count){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  __asm volatile("CPSID I");
 8000ad4:	b672      	cpsid	i
  if (currentPt!=head){
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <thread_delay+0x44>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <thread_delay+0x48>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d011      	beq.n	8000b06 <thread_delay+0x3a>
          currentPt->block_count = getTick()+tick_count;
 8000ae2:	f7ff ff89 	bl	80009f8 <getTick>
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <thread_delay+0x44>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	440a      	add	r2, r1
 8000af0:	609a      	str	r2, [r3, #8]
          currentPt->current_state = TASK_BLOCKED_STATE;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <thread_delay+0x44>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	731a      	strb	r2, [r3, #12]
          SCB->ICSR |= 1U<<28; /*pend PendSV*/
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <thread_delay+0x4c>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <thread_delay+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6053      	str	r3, [r2, #4]
  }
   __asm volatile("CPSIE I");
 8000b06:	b662      	cpsie	i
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000509c 	.word	0x2000509c
 8000b14:	200050a0 	.word	0x200050a0
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	; (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	; (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b4a:	f000 f811 	bl	8000b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4e:	f7ff fde7 	bl	8000720 <main>

08000b52 <LoopForever>:

LoopForever:
  b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   r0, =_estack
 8000b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b60:	08000bd8 	.word	0x08000bd8
  ldr r2, =_sbss
 8000b64:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b68:	200050ac 	.word	0x200050ac

08000b6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <__libc_init_array>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4d0d      	ldr	r5, [pc, #52]	; (8000ba8 <__libc_init_array+0x38>)
 8000b74:	4c0d      	ldr	r4, [pc, #52]	; (8000bac <__libc_init_array+0x3c>)
 8000b76:	1b64      	subs	r4, r4, r5
 8000b78:	10a4      	asrs	r4, r4, #2
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	42a6      	cmp	r6, r4
 8000b7e:	d109      	bne.n	8000b94 <__libc_init_array+0x24>
 8000b80:	4d0b      	ldr	r5, [pc, #44]	; (8000bb0 <__libc_init_array+0x40>)
 8000b82:	4c0c      	ldr	r4, [pc, #48]	; (8000bb4 <__libc_init_array+0x44>)
 8000b84:	f000 f818 	bl	8000bb8 <_init>
 8000b88:	1b64      	subs	r4, r4, r5
 8000b8a:	10a4      	asrs	r4, r4, #2
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	42a6      	cmp	r6, r4
 8000b90:	d105      	bne.n	8000b9e <__libc_init_array+0x2e>
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b98:	4798      	blx	r3
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7ee      	b.n	8000b7c <__libc_init_array+0xc>
 8000b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba2:	4798      	blx	r3
 8000ba4:	3601      	adds	r6, #1
 8000ba6:	e7f2      	b.n	8000b8e <__libc_init_array+0x1e>
 8000ba8:	08000bd0 	.word	0x08000bd0
 8000bac:	08000bd0 	.word	0x08000bd0
 8000bb0:	08000bd0 	.word	0x08000bd0
 8000bb4:	08000bd4 	.word	0x08000bd4

08000bb8 <_init>:
 8000bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bba:	bf00      	nop
 8000bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bbe:	bc08      	pop	{r3}
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	4770      	bx	lr

08000bc4 <_fini>:
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	bf00      	nop
 8000bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bca:	bc08      	pop	{r3}
 8000bcc:	469e      	mov	lr, r3
 8000bce:	4770      	bx	lr
